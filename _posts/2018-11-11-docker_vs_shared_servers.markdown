---
layout: post
title:      "Docker vs Shared Servers"
date:       2018-11-11 21:12:37 +0000
permalink:  docker_vs_shared_servers
---


The classic, and still very valid way to  put something on the web is to get some *shared hosting*. This is where you go to a hosting service, pay a certain monthly fee, and you get access to a server. Unless you pay for dedicated hosting, you don't get full control of an actualy box in a server farm, but likely a shared server. These companies have gobs of processing power at their disposal, and they carve off a chunk for your purposes. The hosting company sets up a *virtual machine* for you. Some of the resources are set aside, and sort of pretend to be an actual computer, running an OS, probably some form of linux, and anything else needed to run. From here you can log in and add all your files, run what needs to be run, and you're off.
One downside of this approach is the processing power required to run it. Each virtual machine takes power to emulate, and it sets up and entire machine. Running linux or other server software on each VM isn't totally necessary. If all the app needs is for Rails/Python/php to run, why does each instance need it's whole setup?
This is where Docker images come in. An *image* is essentially your app, encapsulated. When you run Docker on your app, it bundles it all up into a package that any machine running Docker can understand. I think of it like old CD-ROMs...if you compiled your program and burned it onto a disc, and CD drive was capable of reading it. Think of Docker like the CD drive itsself.
One giant linux machine, virtual or actual, can run many Docker images at once. In stead of running a VM for every single app, and dealing with all of the setup and configuration, it all comes packed into the image. It is much more efficient in terms of hardware demands, since all the power to drive all the VMs isn't needed any more. It also lends much better to more modern *serverless* cloud computing, since all the configuration is send along with the image. With a traditional app, things might work perfectly on my dev enviornment, but if my computer goes down, or somebody else is going to help me with it, they have a completely different computer and things might not work the same. Say its a Ruby app, and my friend is on Windows and doesn't have Ruby. He'd have to go through all the setup of getting the language working locally before even trying to run it.Using docker, these issues are gone, as long as my friend has Docker installed, it'll work. You just run the image through Docker, opposed to running it nativly, and it works. 
